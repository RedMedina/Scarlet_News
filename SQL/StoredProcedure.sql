DELIMITER //
CREATE PROCEDURE INSERT_USERS(Nombre varchar(100), email varchar(100), userA varchar(100), Picture longblob, userFirma varchar(100), userKey varchar(100), userStatus boolean, creationDate datetime, creationBy varchar(100), lastUpdate datetime, lastUpdateBy varchar(100), UserRol int)
BEGIN
    INSERT INTO users(FULLNAME, EMAIL, USER_ALIAS, PICTURE, USER_FIRMA, USER_KEY, USER_STATUS, CREATION_DATE, CREATED_BY, LASTUPDATE_BY, LASTUPDATE_DATE, USER_ROL) VALUES
    				 (Nombre, email, userA, Picture, userFirma, userKey, userStatus, creationDate, creationBy, lastUpdateBy, lastUpdate, UserRol);
END //
    
DELIMITER ;


DELIMITER //
CREATE PROCEDURE SELECT_USERS(Email varchar(100), UserKey varchar(100))
BEGIN
	Select USER_ID, FULLNAME, EMAIL, USER_ALIAS, PICTURE, USER_FIRMA, USER_KEY, USER_STATUS, CREATION_DATE, CREATED_BY, LASTUPDATE_BY, LASTUPDATE_DATE, USER_ROL
    FROM users WHERE EMAIL = Email AND USER_KEY = UserKey;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE INSERT_USERS_Us(Nombre varchar(100), email varchar(100), userA varchar(100), Picture longblob, userFirma varchar(100), userKey varchar(100), userStatus boolean, creationDate datetime, lastUpdate datetime, UserRol int)

BEGIN
SET @By =  (SELECT USER_ID FROM users);
    INSERT INTO users(FULLNAME, EMAIL, USER_ALIAS, PICTURE, USER_FIRMA, USER_KEY, USER_STATUS, CREATION_DATE, CREATED_BY, LASTUPDATE_BY, LASTUPDATE_DATE, USER_ROL) VALUES
    				 (Nombre, email, userA, Picture, userFirma, userKey, userStatus, creationDate, @By, @By, lastUpdate, UserRol);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATE_USERS(ID int, UserKey varchar(100), Nombre varchar(100), email varchar(100), userA varchar(100), Picture longblob, userFirma varchar(100), userKeyy varchar(100), lastUpdate datetime, lastUpdateBy varchar(100))
BEGIN
    UPDATE users SET FULLNAME = Nombre, EMAIL = email, USER_ALIAS = userA, PICTURE = Picture, USER_FIRMA = userFirma, LASTUPDATE_BY = lastUpdateBy, LASTUPDATE_DATE = lastUpdate WHERE USER_ID = ID AND USER_KEY = UserKeyy;
END //
    
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DELETE_USER(ID int, lastUpdate datetime, lastUpdateBy varchar(100))
BEGIN
    UPDATE users SET LASTUPDATE_BY = lastUpdateBy, LASTUPDATE_DATE = lastUpdate, USER_STATUS = FALSE WHERE USER_ID = ID;
END //
    
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SELECT_REPORTERS()
BEGIN
	Select USER_ID, FULLNAME, PICTURE
    FROM users WHERE USER_ROL = 2;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REPORTER_SEL(Id_Us int)
BEGIN
	Select USER_ID, FULLNAME, EMAIL, USER_ALIAS, PICTURE, USER_FIRMA, USER_KEY, USER_STATUS, USER_ROL
    FROM users WHERE USER_ID = Id_Us AND USER_ROL = 2;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ADD_SECTION(colorS varchar(100), descS varchar(100), secOrd int, createdByS int, createdDateS datetime, statusS boolean, LastUpBy int, LastUpDate datetime)
BEGIN
    INSERT INTO sections(COLOR, DESCRIPTION, SECTIONS_ORDEN, CREATED_BY, CREATED_DATE, SECTIONS_STATUS, LASTUPDATE_BY, LASTUPDATE_DATE) VALUES (colorS, descS, secOrd, createdByS, createdDateS, statusS, LastUpBy, LastUpDate);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SELECT_SECFIRST()
BEGIN
    Select ID_SECTIONS, COLOR, DESCRIPTION
    FROM sections;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SELECT_SECEDIT(id INT)
BEGIN
    Select ID_SECTIONS, COLOR, DESCRIPTION, SECTIONS_ORDEN
    FROM sections WHERE ID_SECTIONS = id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE UPDATE_SECTIONS(idS int, colorS varchar(100), descriptionS varchar(100), ordenS int, lastUpdateS datetime, lastUpdateByS varchar(100))
BEGIN
    UPDATE sections SET COLOR = colorS, DESCRIPTION = descriptionS, SECTIONS_ORDEN = ordenS, LASTUPDATE_BY = lastUpdateByS, LASTUPDATE_DATE = lastUpdateS WHERE ID_SECTIONS = idS;
END //
    
DELIMITER ;

DELIMITER //
CREATE PROCEDURE DELETE_SECTIONS(idS int, lastUpdateS datetime, lastUpdateByS varchar(100))
BEGIN
    UPDATE sections SET SECTIONS_STATUS = false, LASTUPDATE_BY = lastUpdateByS, LASTUPDATE_DATE = lastUpdateS WHERE ID_SECTIONS = idS;
END //
    
DELIMITER ;

DELIMITER //
CREATE PROCEDURE INSERTAR_NEWS_MEDIA(Content LONGBLOB, Type VARCHAR(20), MediaStatus BOOLEAN, MediaNew INT)
BEGIN
    DECLARE ID INT;
    SET ID = (SELECT ID_NEWS FROM news ORDER BY ID_NEWS DESC LIMIT 1);
    INSERT INTO news_media (CONTENT_MEDIA, TYPE_MEDIA, MEDIA_STATUS, NEWS_MEDIA) VALUES (Content, Type, MediaStatus, ID);
END //
    
DELIMITER ;

DELIMITER //
CREATE PROCEDURE INSERTAR_NOTICIA(TitleN varchar(100), PaisN varchar(100), CiudadN varchar(100), EstadoN varchar(100), DateN datetime, FirmaRN varchar(100), DescriptionN varchar(500), TextoN varchar(1000), Reporter int, StatusN int, CreationDN datetime, PictureN longblob, EditorSatusN int, SectionN int, HoraN time)
BEGIN
    INSERT INTO news (TITLE_NEW, PAIS, CIUDAD, ESTADO, NEWS_DATE, HORA_NEW, REPORTER_FIRMA, Seccion, DESCRIPTION_NEWS, TEXTO_NEWS, REPORTER, NEW_STATUS, CREATION_DATE, PRINCIPAL_PICTURE, EDITOR_STATUS) VALUES (TitleN, PaisN, CiudadN, EstadoN, DateN, HoraN, FirmaRN, SectionN, DescriptionN, TextoN, Reporter, StatusN, CreationDN, PictureN, EditorSatusN);
END //
    
DELIMITER ;


DELIMITER //
CREATE PROCEDURE INSERTAR_KEYWORDS(StatusK Boolean, TextoKey varchar(100))
BEGIN
    DECLARE ID INT;
    SET ID = (SELECT ID_NEWS FROM news ORDER BY ID_NEWS DESC LIMIT 1);
    INSERT INTO key_words (STATUS_KEY, TEXT_KEY , KEY_NEWS) VALUES (StatusK, TextoKey, ID);
END //

DELIMITER ;

CREATE VIEW SELECT_NOTICIA_EDITOR_REPORTER AS SELECT ID_NEWS, TITLE_NEW, HORA_NEW, DESCRIPTION_NEWS, PRINCIPAL_PICTURE, NEW_STATUS FROM news;

CREATE VIEW SELECT_NEW AS SELECT ID_NEWS, TITLE_NEW, PAIS, CIUDAD, ESTADO, NEWS_DATE, HORA_NEW, REPORTER_FIRMA, Seccion, DESCRIPTION_NEWS, TEXTO_NEWS, NEW_STATUS, PRINCIPAL_PICTURE, EDITOR_STATUS FROM news;

CREATE VIEW SELECTKEYW AS SELECT ID_KEYS, STATUS_KEY, TEXT_KEY, KEY_NEWS FROM key_words;

CREATE VIEW SELECTMEDIA AS SELECT ID_MEDIA, CONTENT_MEDIA, TYPE_MEDIA, MEDIA_STATUS, NEWS_MEDIA FROM news_media;

DELIMITER //
CREATE PROCEDURE UPDATE_NOTICIA(TitleN varchar(100), PaisN varchar(100), CiudadN varchar(100), EstadoN varchar(100), DateN datetime, DescriptionN varchar(500), TextoN varchar(1000), StatusN int, EditorSatusN int, SectionN int, HoraN time, IDUPDATE int)

BEGIN
    UPDATE news SET TITLE_NEW = TitleN, PAIS = PaisN, CIUDAD = CiudadN, ESTADO = EstadoN, NEWS_DATE = DateN, HORA_NEW = HoraN, Seccion = SectionN, DESCRIPTION_NEWS = DescriptionN, TEXTO_NEWS = TextoN, NEW_STATUS = StatusN, EDITOR_STATUS = EditorSatusN, RETROALIMENTACION = Retro WHERE ID_NEWS = IDUPDATE;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE DELETE_NOTICIA(IDNEW int)

BEGIN
    UPDATE news SET Activa = false WHERE ID_NEWS = IDNEW;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE Select_Secciones_Index()

BEGIN
    SELECT COLOR, DESCRIPTION, SECTIONS_ORDEN FROM sections WHERE SECTIONS_STATUS = TRUE ORDER BY SECTIONS_ORDEN;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE SelectNewSection(SectionD int)

BEGIN
    SELECT ID_NEWS, TITLE_NEW, NEWS_DATE, DESCRIPTION_NEWS, PRINCIPAL_PICTURE, Seccion FROM news WHERE Activa = TRUE AND NEW_STATUS = 3 AND Seccion = SectionD;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE SELECT_COMMMENTS(idNew int, ComentType int)

BEGIN
    SELECT ID_COMMENT, COMENTARIO, AUTOR, COMMENT_ANSWER, PICTURE FROM comments, users where COMMENT_NEWS = idNew and TYPE_COM = ComentType and USER_ID = AUTOR ORDER BY CREATION_DATE_C DESC;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE INSERTAR_COMENTARIOS(ComentarioC varchar(200), AutorC int, TypeCom int, CreationDateC datetime, UserAns int, ComentAns int, NewCom int)
BEGIN
    INSERT INTO comments (COMENTARIO, AUTOR, TYPE_COM, CREATION_DATE_C, USER_ANSWER, COMMENT_ANSWER, COMMENT_NEWS, COMMENT_STATUS) VALUES (ComentarioC, AutorC, TypeCom, CreationDateC, UserAns, ComentAns, NewCom, true);
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE ELIMINAR_COM(ID_COM int)

BEGIN
    UPDATE comments SET COMMENT_STATUS = false WHERE ID_COMMENT = ID_COM;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE INSERTAR_LIKE(NewL int, UserLike int)
BEGIN
    INSERT INTO likes_news (STATUS_LIKES, NEW_LIKE, USER_LIKE) VALUES (true, NewL, UserLike);
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE Eliminar_Like(ID_Likes int)

BEGIN
    UPDATE likes_news SET STATUS_LIKES = false WHERE ID_LIKES = ID_Likes;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE Eliminar_Like2(ID_NewLike int, ID_UserLike int)

BEGIN
    DELETE FROM likes_news WHERE NEW_LIKE = ID_Likes AND USER_LIKE = ID_UserLike;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE Seleccionar_Likes(ID_Likes int)

BEGIN
    SELECT ID_LIKES from likes_news WHERE NEW_LIKE = ID_Likes and STATUS_LIKES = true;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE Mi_Like(ID_LikesNews int, UserLike int)

BEGIN
    SELECT ID_LIKES from likes_news WHERE NEW_LIKE = ID_LikesNews and USER_LIKE = UserLike and STATUS_LIKES = true;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE Advanced_Search(FechaIn datetime, FechaFin datetime, Texto varchar(100), PalabraC varchar(100))

BEGIN
   SELECT ID_NEWS, TITLE_NEW, DESCRIPTION_NEWS, NEWS_DATE, PRINCIPAL_PICTURE FROM news, key_words WHERE
    (Texto IS NULL OR TITLE_NEW LIKE CONCAT("%",Texto,"%") OR DESCRIPTION_NEWS LIKE CONCAT("%",Texto,"%") OR TEXTO_NEWS LIKE CONCAT("%",Texto,"%")) AND (FechaIn IS NULL OR NEWS_DATE > FechaIn) AND (FechaFin IS NULL OR NEWS_DATE < FechaFin) AND 
    (PalabraC IS NULL OR TEXT_KEY = PalabraC AND ID_NEWS = KEY_NEWS) AND Activa = TRUE AND NEW_STATUS = 3;
END //

DELIMITER ;


CREATE VIEW BUSQUEDA_AV AS SELECT ID_NEWS, TITLE_NEW, DESCRIPTION_NEWS, NEWS_DATE, PRINCIPAL_PICTURE, TEXTO_NEWS, TEXT_KEY, KEY_NEWS, Activa, NEW_STATUS FROM news, key_words GROUP BY ID_NEWS;


SET @Texto = null;
SET @FechaI = null;
SET @FechaFin = null;
SET @PalabraC = "Ciencia";
SELECT ID_NEWS, TITLE_NEW, DESCRIPTION_NEWS, NEWS_DATE, PRINCIPAL_PICTURE FROM news, key_words WHERE
(@Texto IS null OR TITLE_NEW LIKE CONCAT('%',@Texto,'%') OR DESCRIPTION_NEWS LIKE CONCAT('%',@Texto,'%') OR TEXTO_NEWS LIKE CONCAT('%',@Texto,'%')) AND (@FechaI IS null OR NEWS_DATE > @FechaI) AND  (@FechaFin IS null OR NEWS_DATE < @FechaFin) AND 
(@PalabraC IS null OR TEXT_KEY = @PalabraC AND KEY_NEWS = ID_NEWS) AND Activa = TRUE AND NEW_STATUS = 3;



DELIMITER //
CREATE PROCEDURE BusquedaAvanzada(FechaIn datetime, FechaFin datetime, Texto varchar(100), PalabraC varchar(100))

BEGIN
    IF Texto = NULL THEN
        SET Texto = "";
    END IF;
    
    IF FechaIn = NULL THEN
        SET FechaIn = "";
    END IF;
    
    IF FechaFin = NULL THEN
        SET FechaFin = "";
    END IF;
    
    IF PalabraC = NULL THEN
        SET PalabraC = "";
    END IF;
    
       SELECT ID_NEWS, TITLE_NEW, DESCRIPTION_NEWS, NEWS_DATE, PRINCIPAL_PICTURE FROM news, key_words WHERE
    (TITLE_NEW LIKE CONCAT("%",Texto,"%") OR DESCRIPTION_NEWS LIKE CONCAT("%",Texto,"%") OR TEXTO_NEWS LIKE CONCAT("%",Texto,"%")) AND (NEWS_DATE > FechaIn) AND (NEWS_DATE < FechaFin) AND 
    (TEXT_KEY = PalabraC AND ID_NEWS = KEY_NEWS) AND Activa = TRUE AND NEW_STATUS = 3;
    
END //

DELIMITER ;

CREATE VIEW REPORTE_LIKES AS SELECT ID_NEWS, TITLE_NEW, DESCRIPTION_NEWS, NEWS_DATE, PRINCIPAL_PICTURE, TEXTO_NEWS, Activa, NEW_STATUS, NEW_LIKE, ID_SECTIONS, Seccion, DESCRIPTION FROM news, likes_news, sections GROUP BY ID_NEWS;

CREATE VIEW SELECT_ID_NEW AS SELECT ID_NEWS, Seccion FROM news;


DELIMITER //
CREATE PROCEDURE SELECT_CANT_COMMMENTS(idNew int)

BEGIN
    SELECT ID_COMMENT FROM comments where COMMENT_NEWS = idNew;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE Select_Secciones_Reporte()

BEGIN
    SELECT COLOR, DESCRIPTION, SECTIONS_ORDEN, CREATED_DATE FROM sections WHERE SECTIONS_STATUS = TRUE;
END //

DELIMITER ;


CREATE VIEW SELECT_REPORTE_SECTION AS SELECT ID_SECTIONS, COLOR, DESCRIPTION, CREATED_DATE, SECTIONS_STATUS FROM sections;



DELIMITER //

CREATE TRIGGER REGISTRO_NEWS AFTER INSERT ON news
  FOR EACH ROW
BEGIN
    INSERT INTO registro_noticias SET NOTICIA_CREADA = NEW.ID_NEWS, FechaC = NEW.CREATION_DATE;
END //

DELIMITER ;


DELIMITER //

CREATE TRIGGER registro_usuarios AFTER INSERT ON users
  FOR EACH ROW
BEGIN
    INSERT INTO registro_usuarios SET ID_USUARIO = NEW.USER_ID, FECHA_CREADO = NEW.CREATION_DATE, ROL_US = NEW.USER_ROL;
END //

DELIMITER ;


CREATE VIEW SELECT_NOTICIA_EDITOR_REPORTER_REP AS SELECT ID_NEWS, TITLE_NEW, HORA_NEW, DESCRIPTION_NEWS, PRINCIPAL_PICTURE, NEW_STATUS, REPORTER, Activa, NEWS_DATE, RETROALIMENTACION FROM news;


DELIMITER //
CREATE FUNCTION DELETE_NEW_BC_DEL_US(REPORTER_VAR INT)

RETURNS BOOLEAN
BEGIN 
    UPDATE news SET Activa = false WHERE REPORTER = REPORTER_VAR AND NEW_STATUS != 3;
    RETURN TRUE;
END //

DELIMITER ;


DELIMITER //
CREATE FUNCTION DELETE_NOTICIAA(IDNEW int) RETURNS BOOLEAN

BEGIN
    UPDATE news SET Activa = false WHERE ID_NEWS = IDNEW;
    RETURN TRUE;
END //

DELIMITER ;