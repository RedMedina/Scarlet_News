CREATE DATABASE IF NOT EXISTS SCARLET_NEWS;

CREATE TABLE IF NOT EXISTS US_ROLES
(
    ROL_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DESCRIPCION VARCHAR(50) NOT NULL,
    ROL_STATUS BOOLEAN NOT NULL,
    CREATION_DATE DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    FULLNAME VARCHAR(200) NOT NULL,
    EMAIL VARCHAR(200) NOT NULL,
    USER_ALIAS VARCHAR(200) NOT NULL,
    PICTURE LONGBLOB NOT NULL,
    USER_FIRMA VARCHAR(200) COMMENT "solo activos en reporteros",
    USER_KEY VARCHAR(200) NOT NULL COMMENT "Contraseña",
    USER_STATUS BOOLEAN NOT NULL COMMENT "Marca si el usuario esta activo o inactivo",
    CREATION_DATE DATETIME NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL COMMENT "Marca quién creó al usuario (Reportero/Editor)",
    LASTUPDATE_BY VARCHAR(100) COMMENT "Marca quién fue el ultimo en modificar al usuario",
    LASTUPDATE_DATE DATETIME NOT NULL,
    USER_ROL INT NOT NULL COMMENT "Llave foranea del rol del usuario (Usuario/Reportero/Editor)",
    FOREIGN KEY (USER_ROL) REFERENCES US_ROLES(ROL_ID)
);

CREATE TABLE IF NOT EXISTS SECTIONS
(
    ID_SECTIONS INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    COLOR VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(100) NOT NULL,
    SECTIONS_ORDEN INT NOT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE DATETIME NOT NULL,
    SECTIONS_STATUS BOOLEAN NOT NULL,
    LASTUPDATE_BY INT,
    LASTUPDATE_DATE DATETIME,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS NEW_STATUS
(
    ID_NEW_STATUS INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DESCRIPTION VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS NEWS
(
    ID_NEWS INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    TITLE_NEW VARCHAR(100) NOT NULL,
    PAIS VARCHAR(200) NOT NULL,
    CIUDAD VARCHAR(200) NOT NULL,
    COLONIA VARCHAR(200) NOT NULL,
    NEWS_DATE DATETIME NOT NULL COMMENT "Fecha y hora del acontencimiento",
    REPORTER_FIRMA VARCHAR(200) NOT NULL,
    DESCRIPTION_NEWS VARCHAR(500) NOT NULL,
    TEXTO_NEWS VARCHAR(1000) NOT NULL,
    REPORTER INT NOT NULL COMMENT "Reportero que la escribió",
    NEW_STATUS INT NOT NULL COMMENT "Llave foranea del status actual",
    CREATION_DATE DATETIME NOT NULL,
    PRINCIPAL_PICTURE LONGBLOB NOT NULL COMMENT "Foto de Miniatura",
    EDITOR_STATUS INT NOT NULL COMMENT "Editor que aceptó/borro la noticia",
    FOREIGN KEY (REPORTER) REFERENCES USERS(USER_ID),
    FOREIGN KEY (NEW_STATUS) REFERENCES NEW_STATUS(ID_NEW_STATUS)
);

CREATE TABLE IF NOT EXISTS NEWS_MEDIA
(
    ID_MEDIA INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CONTENT_MEDIA LONGBLOB NOT NULL COMMENT "Contenido Video/Imagen",
    TYPE_MEDIA VARCHAR(20) NOT NULL COMMENT "Video/Imagen",
    MEDIA_STATUS BOOLEAN NOT NULL,
    NEWS_MEDIA INT NOT NULL COMMENT "Noticia a la que pertenece el Video/Imagen",
    FOREIGN KEY(NEWS_MEDIA) REFERENCES NEWS(ID_NEWS)
);

CREATE TABLE IF NOT EXISTS NEWS_RETRO_COMMENTS
(
    ID_RET_COM INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    EDITOR INT NOT NULL COMMENT "Editor que otorga la retroalimentación de la noticia",
    REPORTER_NEW INT NOT NULL COMMENT "Reportero que creó la noticia",
    RETROALIMENTATION VARCHAR(250) NOT NULL,
    NEW_COMMENT INT NOT NULL COMMENT "Noticia que se le otorga comentarios",
    FOREIGN KEY(NEW_COMMENT) REFERENCES NEWS(ID_NEWS)
);

CREATE TABLE IF NOT EXISTS COMMENTS_TYPES
(
    ID_COM_TYPE INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    COM_TYPE_STATUS BOOLEAN NOT NULL,
    DESCRIPTION VARCHAR(20) NOT NULL COMMENT "Define si es un comentario principal o una respuesta a otro comentario"
);

CREATE TABLE IF NOT EXISTS COMMENTS
(
    ID_COMMENT INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    COMENTARIO VARCHAR(200) NOT NULL,
    AUTOR INT NOT NULL COMMENT "Autor del comentario",
    TYPE_COM INT NOT NULL COMMENT "Llave foranea del tipo de comentario",
    CREATION_DATE DATETIME NOT NULL,
    USER_ANSWER INT COMMENT "Define a quien le responde",
    COMMENT_ANSWER INT COMMENT "Define a que comentario responde",
    COMMENT_NEWS INT NOT NULL COMMENT "A que noticia comenta",
    FOREIGN KEY (COMMENT_NEWS) REFERENCES NEWS(ID_NEWS),
    FOREIGN KEY (TYPE_COM) REFERENCES COMMENTS_TYPES(ID_COM_TYPE)
);

CREATE TABLE IF NOT EXISTS KEY_WORDS
(
    ID_KEYS INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    STATUS_KEY BOOLEAN NOT NULL,
    TEXT_KEY VARCHAR(100) NOT NULL COMMENT "Palabra clave",
    KEY_NEWS INT NOT NULL COMMENT "Noticia a la que pertenece",
    FOREIGN KEY(KEY_NEWS) REFERENCES NEWS(ID_NEWS)
);

CREATE TABLE IF NOT EXISTS SECTION_NEWS
(
    ID_SECTION_NEW INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    NEWS_S INT NOT NULL COMMENT "Noticia que posee esa sección",
    SECTION_S INT NOT NULL COMMENT "Sección de la noticia",
    STATUS_SN BOOLEAN NOT NULL,
    FOREIGN KEY(NEWS_S) REFERENCES NEWS(ID_NEWS),
    FOREIGN KEY(SECTION_S) REFERENCES SECTIONS(ID_SECTIONS)
);

CREATE TABLE IF NOT EXISTS LIKES_NEWS
(
    ID_LIKES INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    STATUS_LIKES BOOLEAN NOT NULL,
    NEW_LIKE INT NOT NULL COMMENT "Noticia a la que se le dio like",
    USER_LIKE INT NOT NULL COMMENT "Usuario que dio like",
    FOREIGN KEY (NEW_LIKE) REFERENCES NEWS(ID_NEWS),
    FOREIGN KEY (USER_LIKE) REFERENCES USERS(USER_ID)
);

CREATE TABLE IF NOT EXISTS REGISTRO_NOTICIAS
(
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOTICIA_CREADA INT NOT NULL,
    FOREIGN KEY (NOTICIA_CREADA) REFERENCES news(ID_NEWS);
);

CREATE TABLE IF NOT EXISTS registro_usuarios
(
    ID_REGISTRO_US INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO INT NOT NULL,
    ROL_US INT NOT NULL,
    FECHA_CREADO datetime NOT NULL,
    FOREIGN KEY (ID_USUARIO) REFERENCES users(USER_ID),
    FOREIGN KEY (ROL_US) REFERENCES us_roles(ROL_ID)
);